from flask import Flask, render_template
#from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
#from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import yaml
import xmlrpc.client
import os

def load_config(file_path='/srv/www/wsgi/web/config.yaml'):
    with open(file_path, 'r') as file:
        config = yaml.safe_load(file)
    return config
    
# Global config variable
config = load_config()  # Load the configuration once when the script runs

# Initialize Flask app
app = Flask(__name__)

def decrypt_password(private_key_path="/srv/www/wsgi/web/private_key.pem", file_path="/srv/www/wsgi/web/.userfile"):
    with open(private_key_path, "rb") as private_file:
        private_key = serialization.load_pem_private_key(private_file.read(), password=None, backend=default_backend())

    with open(file_path, "rb") as file:
        encrypted_password = file.read()

    decrypted_password = private_key.decrypt(
        encrypted_password,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    return decrypted_password.decode()

@app.route('/systems')
def list_active_systems():
    # Get credentials from the file
#    USERNAME, PASSWORD = credentials.get_credentials(CREDENTIALS_FILE)
    
    # Ensure credentials were found
    if not {config['USERNAME']}:
        return "Error: Missing username or password in credentials file", 400

    client = xmlrpc.client.ServerProxy(config['SUMA_API_URL'], allow_none=True)
    session_key = client.auth.login(config['USERNAME'], decrypt_password())

    try:
        # Get a list of all active systems
        system_data = client.system.listActiveSystems(session_key)
        inactive_systems = client.system.listInactiveSystems(session_key)

        # Prepare a list to hold system data
        active_systems = []
      
        for system in system_data:
            system_id = system["id"]
            system_name = system["name"]
            last_checkin = system["last_checkin"]
            last_boot = system["last_boot"]
            #created = system["created"]

            # Get the number of relevant patches and packages for this system
            relevant_errata = client.system.getRelevantErrata(session_key, system_id)
            upgradable_packages = client.system.listLatestUpgradablePackages(session_key, system_id)

            patch_count = len(relevant_errata)
            package_count = len(upgradable_packages)

            # Append system details with patch and package counts
            active_systems.append({
                "name": system_name,
                "id": system_id,
                "last_checkin": last_checkin,
                "last_boot": last_boot,
                "patches_needed": patch_count,
                "packages_needed": package_count
            })

    finally:
        # Logout from the API
        client.auth.logout(session_key)

    sorted_active_systems = sorted(active_systems, key=lambda sys: sys.get('name', ''))
    sorted_inactive_systems = sorted(inactive_systems, key=lambda sys: sys.get('last_checkin', ''))
      
    return render_template('systems.html', active_systems=sorted_active_systems, inactive_systems=sorted_inactive_systems)

@app.route('/updates/<int:system_id>')
def get_updates(system_id):

    # Get credentials from the file
#    USERNAME, PASSWORD = credentials.get_credentials(CREDENTIALS_FILE)


    # Ensure credentials were found
    if not config['USERNAME']:
        return "Error: Missing username or password in credentials file", 400


    client = xmlrpc.client.ServerProxy(config['SUMA_API_URL'], allow_none=True)
    session_key = client.auth.login(config['USERNAME'], decrypt_password())

    # Get relevant patches and upgradable packages
    relevant_errata = client.system.getRelevantErrata(session_key, system_id)
    upgradable_packages = client.system.listLatestUpgradablePackages(session_key, system_id)

    client.auth.logout(session_key)
    # Sort patches by patch_type (adjust based on actual field name)
    sorted_patches = sorted(relevant_errata, key=lambda patch: patch.get('advisory_type', ''))
    # Sort packages by name
    sorted_packages = sorted(upgradable_packages, key=lambda package: package.get('name', '').lower())



    # Render the HTML table
    return render_template('updates.html', patches=sorted_patches, packages=sorted_packages)




if __name__ == "__main__":
     app.run(debug=True)
     #app.run(debug=True, host="eus2dapraf001.mykft.net", port=5000,ssl_context=("/home/jse2367/bin/web/ssl/eus2dapraf001.mykft.net.crt", "/home/jse2367/bin/web/ssl/eus2dapraf001.mykft.net.key"))
